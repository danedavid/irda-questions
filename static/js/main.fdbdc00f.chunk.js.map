{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["questions","array","j","temp","i","length","Math","floor","random","shuffle","db","App","_useState","useState","_useState2","Object","slicedToArray","index","setIndex","_useState3","_useState4","correctIndex","setCorrect","_useState5","_useState6","wrongIndex","setWrong","_useState7","_useState8","loader","setLoader","question","handleSubmit","response","answer","setTimeout","react_default","a","createElement","Pane","width","minHeight","backgroundColor","paddingTop","paddingLeft","paddingRight","Spinner","marginX","marginY","size","Fragment","Heading","text","marginTop","choices","map","choice","Button","key","height","appearance","intent","className","marginBottom","textAlign","onClick","Text","color","trim","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAuBMA,SAZU,SAACC,GACf,IAAsBC,EAAGC,EAArBC,EAAIH,EAAMI,OACd,GAAW,IAAND,EAAU,OAAOH,EACtB,OAAUG,GACPF,EAAII,KAAKC,MAAOD,KAAKE,UAAaJ,EAAI,IACtCD,EAAOF,EAAMG,GACbH,EAAMG,GAAKH,EAAMC,GACjBD,EAAMC,GAAKC,EAEd,OAAOF,EAGSQ,CAAQC,IAmFXC,MAjFf,WAAe,IAAAC,EACaC,mBAAS,GADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACCI,EADDJ,EAAA,GAAAK,EAEsBN,mBAAS,MAF/BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEQE,EAFRF,EAAA,GAAAG,EAGkBV,mBAAS,MAH3BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGNE,EAHMD,EAAA,GAGME,EAHNF,EAAA,GAAAG,EAIed,oBAAS,GAJxBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAINE,EAJMD,EAAA,GAIEE,EAJFF,EAAA,GAKPG,EAAW/B,EAAUiB,GAErBe,EAAe,SAACC,GACfA,IAAaF,EAASG,OACzBZ,EAAWS,EAASG,SAEpBZ,EAAWS,EAASG,QACpBR,EAASO,IAEXE,WAAW,WACTb,EAAW,MACXI,EAAS,MACTR,EAASD,EAAQ,GACjBa,GAAU,GACVK,WAAW,WACTL,GAAU,IACT,MACF,MAGL,OACEM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAM,QACNC,UAAU,QACVC,gBAAgB,UAChBC,WAAY,GACZC,YAAa,GACbC,aAAc,IAGZhB,EACEO,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAASC,QAAQ,OAAOC,QAAS,IAAKC,KAAM,KAC5Cb,EAAAC,EAAAC,cAAAF,EAAAC,EAAAa,SAAA,KACFd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAASF,KAAM,KACXlB,EAASqB,MAEbhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEc,UAAW,IAGTtB,EAASuB,QAAQC,IAAI,SAACC,EAAQvC,GAAT,OACnBmB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEC,IAAKzC,EACL0C,OAAQ,IACRC,WAAW,UACXC,OACE5C,IAAUI,EACN,UACAJ,IAAUQ,EACV,SACA,UAENqC,UAAW7C,IAAUI,EAAe,SAAW,GAC/CmB,MAAM,OACNuB,aAAc,EACdC,UAAU,OACVpB,YAAa,GACbC,aAAc,EACdoB,QAAS,kBAAMjC,EAAaf,KAE5BmB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CACEjB,KAAM,IACNkB,MAAM,WAEJX,EAAOY,eClFPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fdbdc00f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Pane,\n  Heading,\n  Text,\n  Button,\n  Spinner,\n} from 'evergreen-ui';\nimport db from './db.json';\nimport './App.css';\n\nconst shuffle = (array) => {\n  let i = array.length, j, temp;\n  if ( i === 0 ) return array;\n  while ( --i ) {\n     j = Math.floor( Math.random() * ( i + 1 ) );\n     temp = array[i];\n     array[i] = array[j];\n     array[j] = temp;\n  }\n  return array;\n};\n\nconst questions = shuffle(db);\n\nfunction App() {\n  const [index, setIndex] = useState(0);\n  const [correctIndex, setCorrect] = useState(null);\n  const [wrongIndex, setWrong] = useState(null);\n  const [loader, setLoader] = useState(false);\n  const question = questions[index];\n\n  const handleSubmit = (response) => {\n    if ( response === question.answer ) {\n      setCorrect(question.answer);\n    } else {\n      setCorrect(question.answer);\n      setWrong(response);\n    }\n    setTimeout(() => {\n      setCorrect(null);\n      setWrong(null);\n      setIndex(index + 1);\n      setLoader(true);\n      setTimeout(() => {\n        setLoader(false);\n      }, 2000);\n    }, 3000);\n  };\n\n  return (\n    <Pane\n      width='100vw'\n      minHeight='100vh'\n      backgroundColor='#FBE6A2'\n      paddingTop={40}\n      paddingLeft={10}\n      paddingRight={10}\n    >\n      {\n        loader\n        ? <Spinner marginX=\"auto\" marginY={160} size={48} />\n        : <>\n        <Heading size={800}>\n          { question.text }\n        </Heading>\n        <Pane\n          marginTop={40}\n        >\n          {\n            question.choices.map((choice, index) => (\n              <Button\n                key={index}\n                height={100}\n                appearance='primary'\n                intent={\n                  index === correctIndex\n                    ? 'success'\n                    : index === wrongIndex\n                    ? 'danger'\n                    : 'warning'\n                }\n                className={index === correctIndex ? 'boomer' : ''}\n                width='100%'\n                marginBottom={5}\n                textAlign='left'\n                paddingLeft={16}\n                paddingRight={8}\n                onClick={() => handleSubmit(index)}\n              >\n                <Text\n                  size={600}\n                  color='#FEF8E7'\n                >\n                  { choice.trim() }\n                </Text>\n              </Button>\n            ))\n          }\n        </Pane>\n      </>\n      }\n    </Pane>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}